using System.Security.Cryptography;
using System.Text;

public class Program
{
    static void Main(string[] args)
    {
        var paymentServices = new IPaymentGateway[]
        {
            new BasicPaymentGateway(),
            new AmountAwarePaymentGateway(),
            new SecurePaymentGateway("secret_key_123")
        };

        foreach (var service in paymentServices)
        {
            Console.WriteLine(service.GeneratePaymentUrl(new Order(123, 12000)));
        }
    }
}

public class Order
{
    public readonly int Id;
    public readonly int Amount;

    public Order(int id, int amount)
    {
        Id = id;
        Amount = amount;
    }
}

public interface IPaymentGateway
{
    string GeneratePaymentUrl(Order order);
}

public abstract class PaymentServiceBase
{
    protected string ComputeMD5Hash(string input)
    {
        MD5 md5 = MD5.Create();
        byte[] hashBytes = md5.ComputeHash(Encoding.UTF8.GetBytes(input));
        return BitConverter.ToString(hashBytes).Replace("-", "").ToLower();
    }

    protected string ComputeSHA1Hash(string input)
    {
        SHA1 sha1 = SHA1.Create();
        byte[] hashBytes = sha1.ComputeHash(Encoding.UTF8.GetBytes(input));
        return BitConverter.ToString(hashBytes).Replace("-", "").ToLower();
    }

    protected string UrlEncode(string value) => Uri.EscapeDataString(value);
}

public class BasicPaymentGateway : PaymentServiceBase, IPaymentGateway
{
    public string GeneratePaymentUrl(Order order)
    {
        string transactionHash = ComputeMD5Hash(order.Id.ToString());
        return $"https://pay.system1.ru/order?amount={order.Amount}RUB&hash={UrlEncode(transactionHash)}";
    }
}

public class AmountAwarePaymentGateway : PaymentServiceBase, IPaymentGateway
{
    public string GeneratePaymentUrl(Order order)
    {
        string combinedData = $"{order.Id}{order.Amount}";
        string verificationHash = ComputeMD5Hash(combinedData);
        return $"https://order.system2.ru/pay?hash={UrlEncode(verificationHash)}";
    }
}

public class SecurePaymentGateway : PaymentServiceBase, IPaymentGateway
{
    private readonly string _apiSecret;

    public SecurePaymentGateway(string apiSecret)
    {
        _apiSecret = apiSecret;
    }

    public string GeneratePaymentUrl(Order order)
    {
        string securePayload = $"{order.Amount}{order.Id}{_apiSecret}";
        string encryptedSignature = ComputeSHA1Hash(securePayload);
        return $"https://system3.com/pay?amount={order.Amount}&currency=RUB&hash={UrlEncode(encryptedSignature)}";
    }
}
